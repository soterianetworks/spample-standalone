package com.soterianetworks.spase.sample.checking.service.impl;

import com.soterianetworks.spase.sample.checking.controller.CheckMachineView;
import com.soterianetworks.spase.sample.checking.controller.SaveCheckMachineParam;
import com.soterianetworks.spase.sample.checking.domain.CheckMachine;
import com.soterianetworks.spase.sample.checking.domain.CheckMachineSearchRequest;
import com.soterianetworks.spase.sample.checking.exception.CheckMachineNotFoundException;
import com.soterianetworks.spase.sample.checking.repository.CheckMachineRepository;
import com.soterianetworks.spase.sample.checking.service.CheckMachineService;
import com.soterianetworks.spase.sample.machine.domain.Machine;
import com.soterianetworks.spase.sample.machine.repository.MachineRepository;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;

import java.util.Date;

@Service
public class CheckMachineServiceImpl implements CheckMachineService {

    @Autowired
    private MachineRepository machineRepository;

    @Autowired
    private CheckMachineRepository checkMachineRepository;

    @Override
    public Page<CheckMachineView> listCheckMachines(CheckMachineSearchRequest searchRequest) {
        return checkMachineRepository.search(searchRequest).map(CheckMachineView::from);
    }

    @Override
    public CheckMachineView findCheckMachineById(String id) {
        CheckMachine machine = checkMachineRepository.findOne(id);
        if (machine == null) {
            throw new CheckMachineNotFoundException("Check Machine not found");
        }
        return CheckMachineView.from(machine);
    }

    @Override
    public CheckMachineView createCheckMachine(SaveCheckMachineParam saveCheckMachineParam) {
        CheckMachine checkMachine = new CheckMachine();
        BeanUtils.copyProperties(saveCheckMachineParam, checkMachine);
        if (!StringUtils.isEmpty(saveCheckMachineParam.getMachineId())) {
            Machine machine = machineRepository.findOne(saveCheckMachineParam.getMachineId());
            checkMachine.setMachine(machine);
        }
        checkMachine.setCreatedAt(new Date());
        return CheckMachineView.from(checkMachineRepository.save(checkMachine));
    }

    @Override
    public CheckMachineView updateCheckMachine(String id, SaveCheckMachineParam saveCheckMachineParam) {
        CheckMachine existed = checkMachineRepository.findOne(id);
        if (existed == null) {
            throw new CheckMachineNotFoundException("Check Machine not found");
        }

        BeanUtils.copyProperties(saveCheckMachineParam, existed, "id");
        if (!StringUtils.isEmpty(saveCheckMachineParam.getMachineId())) {
            Machine machine = machineRepository.findOne(saveCheckMachineParam.getMachineId());
            existed.setMachine(machine);
        }

        return CheckMachineView.from(checkMachineRepository.save(existed));
    }

    @Override
    public CheckMachineView deleteCheckMachine(String id) {
        CheckMachine existed = checkMachineRepository.findOne(id);
        if (existed == null) {
            return null;
        }
        checkMachineRepository.delete(existed);
        return CheckMachineView.from(existed);
    }

    @Override
    public void generateMachineError(Machine machine) {
        CheckMachine checkMachine = new CheckMachine();
        checkMachine.setMachine(machine);
        checkMachine.setDescription("Generated by simulator");
        checkMachine.setCreatedAt(new Date());
        checkMachineRepository.save(checkMachine);
    }
}
